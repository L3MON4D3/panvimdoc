panvimdoc.txt           For NVIM v0.4.3            Last change: 2021 August 12

==============================================================================
Table of Contents                                *panvimdoc-table-of-contents*

==============================================================================
1. panvimdoc                                             *panvimdoc-panvimdoc*

Write documentation in |pandoc markdown|. Generate documentation in vimdoc.

==============================================================================
2. Motivation                                           *panvimdoc-motivation*

Writing documentation is hard. Writing documentation for vim plugins in vimdoc
is an additional hassle. Making writing vim plugin documentation frictionless
is important.

Writing documentation in markdown and converting it to vimdoc can help toward
that goal. This way, plugin authors will have to write documentation just once
as part of the README of the project, and have the vim documentation
autogenerated.

Writing vim documentation requires conforming to a few simple rules. Although
>vimdoc< is not a well defined spec, it does have some nice syntax highlighting
and features like tags and links when the text file is in >vimdoc< compatible
format and when >filetype=help< in vim. Also, typically, while vim
documentation is just plain text files, they are usually formatted well using
whitespace. Preserving these features and characteristics is important.

See |References| for more information.

It would be nice to write documentation in Markdown and convert to vimdoc.
[@mjlbach](https://github.com/mjlbach) has already implemented a neovim
treesitter markdown to vimdoc converter that works fairly well. This approach
is close to ideal. There are no dependencies ( except for the Markdown
treesitter parser ). While it appears that the markdown parser may cause
crashes, I have not experienced any in my use. It is neovim only but you can
use this on github actions even for a vim plugin documentation.

I found two other projects that do something similar, again linked in the
references. As far as I can tell, these projects are all in use and actively
maintained and these projects may suit your need.

However, none of these projects use Pandoc. Pandoc Markdown supports a wide
number of features. Most importantly, it supports a range of Markdown formats
and flavors. And, Pandoc has lua filters and a custom output writer that can be
configured in lua. Pandoc filters are easy to write and maintain too.

This project aims to write a specification in Pandoc Markdown, and take
advantage of Pandoc filters, to convert a Markdown file to a vim documentation
help file.

==============================================================================
3. Goals:                                                   *panvimdoc-goals:*


- Markdown file must be readable when the file is presented as the README on GitHub / GitLab.
- Markdown file converted to HTML using Pandoc must be web friendly and render appropriately (if the user chooses to do so).
- Vim documentation generated must support links and tags.
- Vim documentation generated should be aesthetically pleasing to view, in vim and as a plain text file.
    - This means using columns and spacing appropriately.
- Format of built in Vim documentation is used as guidelines but not as rules.


==============================================================================
4. Features                                               *panvimdoc-features*


- Autogenerate title for vim documentation
- Generate links and tags
- Support markdown syntax for tables
- Support raw vimdoc syntax where ever needed for manual control.


==============================================================================
5. Specification                                     *panvimdoc-specification*

The specification is described in |panvimdoc.md| along with examples. The
generated output is in |panvimdoc.txt|. The reference implementation of the
Pandoc lua filter is in |panvimdoc.lua|.

If you would like to contribute to the specification please feel free to
comment on this issue: |https://github.com/kdheepak/panvimdoc/issues/1|.

==============================================================================
6. Usage                                                     *panvimdoc-usage*

>
    pandoc -t scripts/panvimdoc.lua ${INPUT} ${OUTPUT}
<


The following are the metadata fields that the custom writer uses:


- >project< (String) _required_: This is typically the plugin name. This is prefixed to all generated tags
- >vimdoctitle< (String) _required_: This is the name of the documentation file that you want to generate
- >vimversion< (String) _optional_: The version vim / neovim that the plugin is targeting. If not present, the version of vim in the available environment is used.
- >toc< (Boolean) _optional_: Whether to generate table of contents or not


Example:

>
    ---
    project: panvimdoc
    vimdoctitle: panvimdoc.txt
    vimversion: Neovim v0.5.0
    toc: true
    ---
<


USING GITHUB ACTIONS                          *panvimdoc-using-github-actions*

Add the following to >./.github/workflows/pandocvim.yml<:

>
    name: panvimdoc
    
    on: [push]
    
    jobs:
      custom_test:
        runs-on: ubuntu-latest
        name: pandoc to vimdoc
        steps:
          - uses: actions/checkout@v2
          - name: panvimdoc
            uses: kdheepak/panvimdoc@v1
            with:
              pandoc: INPUT_FILENAME.md
              vimdoc: doc/OUTPUT_FILENAME.txt
          - uses: stefanzweifel/git-auto-commit-action@v4
            with:
              commit_message: "Auto generate docs"
              branch: ${{ github.head_ref }}
<


Choose >INPUT_FILENAME< and >OUTPUT_FILENAME< appropriately.

==============================================================================
7. References                                           *panvimdoc-references*


- |https://learnvimscriptthehardway.stevelosh.com/chapters/54.html|
- |https://github.com/nanotee/vimdoc-notes|
- |https://github.com/mjlbach/babelfish.nvim|
- |https://foosoft.net/projects/md2vim/|
- |https://github.com/wincent/docvim|


CODEBLOCKS                                              *panvimdoc-codeblocks*

>
    Multi line Code blocks are indented 4 spaces and
    
    are formatted
    
    appropriately with > and <.
<


Alternatively, you can use >vimdoc< as the language for the code block to write
code that will be inserted into the final document.

For example, the following:

>
    ```vimdoc
    You can use codeblocks that have language as `vimdoc` to write raw vimdoc.
    ```
<


will be rendered as below:

You can use codeblocks that have language as `vimdoc` to write raw vimdoc.

==============================================================================
8. Title                                                     *panvimdoc-title*

The first line of the documentation that is generated will look something like
this:

>
    panvimdoc.txt      For VIM - Vi IMproved 8.1       Last change: 2021 August 11
<


==============================================================================
9. Heading                                                 *panvimdoc-heading*

Main headings are numbered.

>
    ==============================================================================
    2. Heading                                                 *panvimdoc-heading*
    
    Main headings are numbered.
<


SUB HEADING 2                                        *panvimdoc-sub-heading-2*

Sub headings are upper cased heading.

>
    SUB HEADING 2                                        *panvimdoc-sub-heading-2*
    
    Sub headings are upper cased heading.
<


Notice that both headings and subheadings have tags.

You can link to the tags by using |sub-heading-2|.

The following markdown:

>
    [sub-heading-2](#sub-heading-2)
<


is converted to the following vimdoc:

LINKS                                                        *panvimdoc-links*

>
    You can link to the tags by using |sub-heading-2|
<


This way, any links will work in markdown README on GitHub or on the web using
anchors AND will work as tags and links in vimdoc. The anchors are simply
dropped in vimdoc. The onus is on the documentation writer to write the correct
link.

MAPPINGS                                                  *panvimdoc-mappings*

Any markdown header of level 3 is a special header. It can be used to generate
documentation of mappings. All content in curly braces >{...}< is dropped and a
tag is created.

The heading >### pv{motion}< becomes the tag >*projectName-pv*<.

Additionally, content in square brackets >[...]< is also dropped for creating
the tag name.

The heading >### :[range]Command< becomes the tag >*projectName-:Command*<.

See following headings as examples:

                                                                *panvimdoc-pv*

pv{motion}                             Command that operates over {motion}
                                       moved.


The following vimdoc mapping is generated:

>
                                                                    *projectName-pv*
    
    pv{motion}                             Command that operates over {motion}
                                           moved.
<


                                                               *panvimdoc-pvd*

pvd                                    Command that takes [count] lines.


The following vimdoc mapping is generated:

>
                                                                   *projectName-pvd*
    
    pvd                                    Command that takes [count] lines.
<


                                        *panvimdoc-:CommandName* *CommandName*

:[range]CommandName                    Command that operates over [range].


The following vimdoc mapping is generated:

>
    
                                            *projectName-:CommandName* *CommandName*
    
    :[range]CommandName                    Command that operates over [range].
<


You can use >{doc=AdditionalTag}< to generate one additional tag for each
header.

                                                                *panvimdoc-pv*

{Visual}pv                             Command that operates over highlighted
                                       lines.


The following vimdoc mapping is generated:

>
                                                                    *panvimdoc-pv*
    
    {Visual}pv                             Command that operates over highlighted
                                           lines.
<


TABLE                                                        *panvimdoc-table*

Support for markdown tables is also available:



**Demonstration of simple table syntax.**

│Right│Left│Center│Default│
│   12│12  │  12  │12     │
│  123│123 │ 123  │123    │
│    1│1   │  1   │1      │




>
    │Right│Left│Center│Default│
    │   12│12  │  12  │12     │
    │  123│123 │ 123  │123    │
    │    1│1   │  1   │1      │
<

vim:tw=78:ts=8:noet:ft=help:norl:
