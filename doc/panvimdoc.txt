*panvimdoc.txt*          For NVIM v0.8.0         Last change: 2023 February 20

==============================================================================
Table of Contents                                *panvimdoc-table-of-contents*

1. panvimdoc                                             |panvimdoc-panvimdoc|
2. TLDR                                                       |panvimdoc-tldr|
3. Usage                                                     |panvimdoc-usage|
4. Motivation                                           |panvimdoc-motivation|
5. Goals                                                     |panvimdoc-goals|
6. Features                                               |panvimdoc-features|
7. Specification                                     |panvimdoc-specification|
8. References                                           |panvimdoc-references|
9. Specification                                     |panvimdoc-specification|
  - External includes              |panvimdoc-specification-external-includes|
  - Codeblocks                            |panvimdoc-specification-codeblocks|
10. Title                                                    |panvimdoc-title|
11. Heading                                                |panvimdoc-heading|
  - Sub Heading 2                            |panvimdoc-heading-sub-heading-2|
  - Markdown Links                          |panvimdoc-heading-markdown-links|
  - Mappings                                      |panvimdoc-heading-mappings|
  - Table                                            |panvimdoc-heading-table|
  - Markdown only content            |panvimdoc-heading-markdown-only-content|
  - Details and summary                |panvimdoc-heading-details-and-summary|
  - Keyboard HTML tag                    |panvimdoc-heading-keyboard-html-tag|
  - Examples                                      |panvimdoc-heading-examples|
  - Examples                                      |panvimdoc-heading-examples|

==============================================================================
1. panvimdoc                                             *panvimdoc-panvimdoc*

Decrease friction when writing documentation for your plugins. Write
documentation in pandoc markdown <https://pandoc.org/MANUAL.html>. Generate
documentation in vimdoc.



==============================================================================
2. TLDR                                                       *panvimdoc-tldr*


1. Choose `${VIMDOC_PROJECT_NAME}`. See .github/workflows/panvimdoc.yml
<./.github/workflows/panvimdoc.yml> as an example.

2. Add the following to `./.github/workflows/panvimdoc.yml`:

>yaml
    name: panvimdoc

    on: [push]

    jobs:
      docs:
        runs-on: ubuntu-latest
        name: pandoc to vimdoc
        steps:
          - uses: actions/checkout@v2
          - name: panvimdoc
            uses: kdheepak/panvimdoc@v3.0.4
            with:
              vimdoc: ${VIMDOC_PROJECT_NAME}
          - uses: stefanzweifel/git-auto-commit-action@v4
            with:
              commit_message: "Auto generate docs"
              branch: ${{ github.head_ref }}
<

3. `README.md` gets converted to `./doc/${VIMDOC_PROJECT_NAME}.txt` and committed
to the repo.




==============================================================================
3. Usage                                                     *panvimdoc-usage*


USING GITHUB ACTIONS ~

Create an empty doc file:

>
    touch doc/${VIMDOC_PROJECT_NAME}.txt
    git commit -am "Add empty doc"
    git push
<

You don’t actually need the file, just the `doc` folder but it is probably
easiest to create a file.

Then add the following to `./.github/workflows/panvimdoc.yml`:

>yaml
    name: panvimdoc

    on: [push]

    jobs:
      docs:
        runs-on: ubuntu-latest
        name: pandoc to vimdoc
        steps:
          - uses: actions/checkout@v2
          - name: panvimdoc
            uses: kdheepak/panvimdoc@main
            with:
              vimdoc: ${VIMDOC_PROJECT_NAME} # Output vimdoc project name (required)
              # The following are all optional
              pandoc: "README.md" # Input pandoc file
              version: "NVIM v0.8.0" # Vim version number
              toc: true # Table of contents
              description: "" # Project Description
              demojify: false # Strip emojis from the vimdoc
              dedupsubheadings: true # Add heading to subheading anchor links to ensure that subheadings are unique
              treesitter: true # Use treesitter for highlighting codeblocks
              ignorerawblocks: true # Ignore raw html blocks in markdown when converting to vimdoc
              docmapping: false # Use h4 headers as mapping docs
              docmappingprojectname: true # Use project name in tag when writing mapping docs
              shiftheadinglevelby: 0 # Shift heading levels by specified number
              incrementheadinglevelby: 0 # Increment heading levels by specified number
<

Choose `VIMDOC_PROJECT_NAME` appropriately. This is usually the name of the
plugin or the documentation file without the `.txt` extension. For example, the
following:

>
    - name: panvimdoc
      uses: kdheepak/panvimdoc@main
      with:
        vimdoc: panvimdoc
<

Will output a file `doc/panvimdoc.txt` and the vim help tag for it will be
`panvimdoc` using the `main` branch of the repository. It is recommended to pin
to an exact version so you can be confident that no surprises occur for you or
your users.

For an example of how this is used, see one of the following workflows:


- kdheepak/panvimdoc <./.github/workflows/panvimdoc.yml>: doc/panvimdoc.txt <./doc/panvimdoc.txt>
- kdheepak/tabline.nvim <https://github.com/kdheepak/tabline.nvim/blob/main/.github/workflows/ci.yml>: doc/tabline.txt <https://github.com/kdheepak/tabline.nvim/blob/main/doc/tabline.txt>
- mcchrish/zenbones.nvim <https://github.com/mcchrish/zenbones.nvim/blob/main/.github/workflows/doc.yml>: doc/zenbones.txt <https://github.com/mcchrish/zenbones.nvim/blob/main/doc/zenbones.txt>
- nvim-lualine/lualine.nvim <https://github.com/nvim-lualine/lualine.nvim/blob/master/.github/workflows/autogen.yml>: doc/lualine.txt <https://github.com/nvim-lualine/lualine.nvim/blob/master/doc/lualine.txt>

_Feel free to submit a PR to add your documentation as an example here._


USING IT MANUALLY ~

The `./panvimdoc.sh` script runs `pandoc` along with all the filters and
custom output writer.

>bash
    $ ./panvimdoc.sh
    Usage: ./panvimdoc.sh --project-name PROJECT_NAME --input-file INPUT_FILE --vim-version VIM_VERSION --toc TOC --description DESCRIPTION --dedup-subheadings DEDUP_SUBHEADINGS --treesitter TREESITTER

    Arguments:
      --project-name: the name of the project
      --input-file: the input markdown file
      --vim-version: the version of Vim that the project is compatible with
      --toc: 'true' if the output should include a table of contents, 'false' otherwise
      --description: a description of the project
      --dedup-subheadings: 'true' if duplicate subheadings should be removed, 'false' otherwise
      --demojify: 'false' if emojis should not be removed, 'true' otherwise
      --treesitter: 'true' if the project uses Tree-sitter syntax highlighting, 'false' otherwise
      --ignore-rawblocks: 'true' if the project should ignore HTML raw blocks, 'false' otherwise
      --doc-mapping: 'true' if the project should use h4 headers as mapping docs, 'false' otherwise
      --shift-heading-level-by: 0 if you don't want to shift heading levels , n otherwise
      --increment-heading-level-by: 0 if don't want to increment the starting heading number, n otherwise
<

You will need `pandoc v3.0.0` or greater for this script to work.


==============================================================================
4. Motivation                                           *panvimdoc-motivation*

Writing documentation is work. Writing documentation in vimdoc for vim plugins
is an additional hassle. Making writing vim plugin documentation frictionless
is important.

Writing documentation in markdown and converting it to vimdoc can help toward
that goal. This way, plugin authors will have to write documentation just once
(for example, as part of the README of the project), and the vim documentation
can be autogenerated.

Writing vim documentation requires conforming to a few simple rules. Although
`vimdoc` is not a well defined spec, vim does have some nice syntax
highlighting and features like tags and links when the text file is in `vimdoc`
compatible format and when `filetype=help` in vim. Also, typically, while vim
documentation are just plain text files, they are usually formatted well using
whitespace. See <https://vimhelp.org/helphelp.txt.html#help-writing> or
`@nanotree`’s project <https://github.com/nanotee/vimdoc-notes> for more
information. I think preserving these features and characteristics of vimdoc
for documentation of vim plugins is important.

Writing documentation in Markdown and converting it to vimdoc is not a novel
idea. For example, one can implement a neovim treesitter based markdown to
vimdoc converter that works fairly well. See ibhagwan/ts-vimdoc.nvim
<https://github.com/ibhagwan/ts-vimdoc.nvim> for more information. This
approach is close to ideal. There are no dependencies, except for the Markdown
treesitter parser. It is neovim only but you can use this on github actions
even for a vim plugin documentation.

I found two other projects that do something similar, wincent/docvim
<https://github.com/wincent/docvim> and FooSoft/md2vim
<https://github.com/FooSoft/md2vim>. As far as I can tell, these projects are
actively maintained and may suit your need.

However, none of these projects use Pandoc. Pandoc Markdown supports a wide
number of features: See <https://pandoc.org/MANUAL.html> for more information.
Most importantly, it supports a range of Markdown formats and flavors. And,
Pandoc has filters and a custom output writer that can be configured in lua.
Pandoc filters can extend the capability of Pandoc with minimal lua scripting,
and these are very easy to write and maintain too.

This project aims to write a specification of syntax in Pandoc Markdown, and to
take advantage of Pandoc filters and the custom output writer capability, to
convert a Markdown file to a vim documentation help file. This project provides
a reference implementation of the specification as well.


==============================================================================
5. Goals                                                     *panvimdoc-goals*


- Markdown file must be readable when the file is presented as the README on GitHub / GitLab / SourceHut etc.
- Markdown file converted to HTML using Pandoc must be web friendly and render appropriately (if the user chooses to do so).
- Vim documentation generated must support links and tags.
- Vim documentation generated should be aesthetically pleasing to view, in vim and as a plain text file.
    - This means using columns and spacing appropriately.
- Format of built in Vim documentation is used as guidelines but not as rules.


==============================================================================
6. Features                                               *panvimdoc-features*


- Autogenerate title for vim documentation
- Autogenerate table of contents
- Generate links and tags
- Support markdown syntax for tables
- Support raw vimdoc syntax where ever needed for manual control.
- Support including multiple Markdown files


==============================================================================
7. Specification                                     *panvimdoc-specification*

The specification is described in panvimdoc.md <./doc/panvimdoc.md> along with
examples. The generated output is in panvimdoc.txt <./doc/panvimdoc.txt>. The
reference implementation of the Pandoc lua filter is in panvimdoc.lua
<./scripts/panvimdoc.lua>. See panvimdoc.sh <./panvimdoc.sh> for how to use
this script, or check the |panvimdoc-usage| section.

If you would like to contribute to the specification, have feature requests or
opinions, please feel free to comment here:
<https://github.com/kdheepak/panvimdoc/discussions/11>.


==============================================================================
8. References                                           *panvimdoc-references*


- <https://learnvimscriptthehardway.stevelosh.com/chapters/54.html>
- <https://github.com/nanotee/vimdoc-notes>
- <https://github.com/mjlbach/babelfish.nvim>
- <https://foosoft.net/projects/md2vim/>
- <https://github.com/wincent/docvim>
- <https://github.com/Orange-OpenSource/pandoc-terminal-writer/>


==============================================================================
9. Specification                                     *panvimdoc-specification*

See ./panvimdoc.txt <./panvimdoc.txt> for generated output of this file.


EXTERNAL INCLUDES                  *panvimdoc-specification-external-includes*

Use the following in your markdown file to include any other markdown file:

>markdown
    ```{.include}
    README.md
    ```
<

The path of the file is with respect to the working directory where `pandoc` is
executed.


CODEBLOCKS                                *panvimdoc-specification-codeblocks*

>
    Multi line Code blocks are indented 4 spaces and

    are formatted

    appropriately with > and <.
<

Alternatively, you can use `vimdoc` as the language for the code block to write
raw text that will be inserted into the final document.

For example, the following:

>
    ```vimdoc
    You can use codeblocks that have language as `vimdoc` to write raw vimdoc.
    ```
<

will be rendered verbatim in the generated documentation.

This can be used to write any custom whitespace formatted documentation in the
generated vimdoc (for mappings, options etc).


==============================================================================
10. Title                                                    *panvimdoc-title*

The first line of the documentation that is generated will look something like
this:

>
    *panvimdoc.txt*    For VIM - Vi IMproved 8.1       Last change: 2021 August 11
<


==============================================================================
11. Heading                                                *panvimdoc-heading*

Main headings are numbered.


SUB HEADING 2                                *panvimdoc-heading-sub-heading-2*

Sub headings are upper cased heading.

Notice that both headings and subheadings have tags.


SUB HEADING 3 ~

Sub headings are upper cased, but do not have tags. They are also not included
in the TOC. They are suffixed with `~` which highlights as **bold** text when
the file is viewed on GitHub.


MARKDOWN LINKS                              *panvimdoc-heading-markdown-links*

You can use markdown links in vimdoc.

>markdown
    You can link to the tags by using [sub heading 2](#sub-heading-2).
<

This way, any links will work in markdown README on GitHub or on the web using
anchors AND will work as tags and links in vimdoc. The anchors are simply
dropped in vimdoc inline. The onus is on the documentation writer to choose the
correct anchor for the appropriate Markdown link.

In vimdoc tags are created when anchors to the internal document are used. If
the target is an external link, the link is inlined.

If the external link is to the neovim documentation, an internal vim link is
generated. For example:


- |cursorcolumn|
- |`completeopt`|
- vim <https://github.com/vim/vim>
- neovim <https://github.com/neovim/neovim>

This is excluded from the links section.

Lastly, if the markdown text is a url, the link is not added to the links
section and instead is placed inline.


MAPPINGS                                          *panvimdoc-heading-mappings*

While you can use codeblocks with the language `vimdoc` to insert text in the
generated vimdoc, it can be useful to have a markdown friendly way to write
documentation for mappings.

Pandoc supports definition lists:
<https://pandoc.org/MANUAL.html#definition-lists>. This can be used to generate
documentation of mappings. All of the content in curly braces `{...}` that is
part of the header is dropped and a tag is created.

For example, the following in a markdown file:

>markdown
    :FnlCompileBuffer

    : Compiles current active fennel buffer

    :FnlCompile[!]

    : Diff compiles all indexed fennel files
    If bang! is present then forcefully compiles all `source` files

    :Fnl {expr}

    : Executes and Evalutate {expr} of fennel

         ```fennel
         :Fnl (print "Hello World")

         :Fnl (values some_var)
         ```

         Testing
<

becomes the following vimdoc:

>

                                                 *projectName-:FnlCompileBuffer*


    :FnlCompileBuffer                      Compiles current active fennel buffer


                                                       *projectName-:FnlCompile*


    :FnlCompile[!]                         Diff compiles all indexed fennel files
                                           If bang! is present then forcefully compiles all `source` files


                                                              *projectName-:Fnl*


    :Fnl {expr}                            Executes and Evalutate {expr} of fennel
                                           >fennel
                                               :Fnl (print "Hello World")

                                               :Fnl (values some_var)
                                           <
                                           Testing
<

Notice that the tag `*projectName-:Command*` is generated for you.
Additionally, content in square brackets `[...]` or curly brackets `{...}` is
also dropped for creating the tag name.

i.e. the term `### :[range]Command` becomes the tag `*projectName-:Command*`.

See following mappings as examples:


                                                              *panvimdoc-pv*


pv{motion}                             Command that operates over {motion} moved.




                                                             *panvimdoc-pvd*


pvd                                    Command that takes [count] lines.




                                                    *panvimdoc-:CommandName*


:[range]CommandName {doc=CommandName}  Command that operates over [range].




                                                              *panvimdoc-pv*


{Visual}pv                             Command that operates over highlighted lines.




TABLE                                                *panvimdoc-heading-table*

Support for markdown tables is also available:

  -----------------------------------------------------------------------------------------------------
  Option                               Background   Default   Description
  ------------------------------------ ------------ --------- -----------------------------------------
  lightness                            light        nil       Change background colors lightness.
                                                              Options: 'bright', 'dim'.

  darkness                             dark         nil       Change background colors darkness.
                                                              Options: 'stark', 'warm'.

  solid_vert_split                     both         false     Solid |hl-VertSplit| background.

  solid_line_nr                        both         false     Solid |hl-LineNr| background.

  solid_float_border                   both         false     Make |hl-FloatBorder| have a more
                                                              distinguishable background highlight.

  darken_noncurrent_window             light        false     Make non-current window background darker
                                                              than Normal.

  lighten_noncurrent_window            dark         false     Make non-current window background
                                                              lighter than Normal.

  italic_comments                      both         true      Make comments italicize.

  darken_comments                      light        38        Percentage to darken comments relative to
                                                              Normal bg.

  lighten_comments                     dark         38        Percentage to lighten comments relative
                                                              to Normal bg.

  darken_non_text                      light        25        Percentage to darken |hl-NonText|
                                                              relative to Normal bg.

  lighten_non_text                     dark         30        Percentage to lighten |hl-NonText|
                                                              relative to Normal bg.

  darken_line_nr                       light        33        Percentage to darken |hl-LineNr| relative
                                                              to Normal bg.

  lighten_line_nr                      dark         35        Percentage to lighten |hl-LineNr|
                                                              relative to Normal bg.

  darken_cursor_line                   light        3         Percentage to darken |hl-CursorLine|
                                                              relative to Normal bg.

  lighten_cursor_line                  dark         4         Percentage to lighten |hl-CursorLine|
                                                              relative to Normal bg.

  colorize_diagnostic_underline_text   both         false     Colorize the fg of DiagnosticUnderline*.

  transparent_background               both         false     Make background transparent.
  -----------------------------------------------------------------------------------------------------

MARKDOWN ONLY CONTENT                *panvimdoc-heading-markdown-only-content*

Sometimes you want to show content that is to be present in Markdown and on the
rendered view on GitHub but ignored in the generated vimdoc. This can be placed
inside `panvimdoc-ignore-{start/end}` blocks:

>
    <!-- panvimdoc-ignore-start -->

    <details>
        <summary>Vimdoc Ignored Section</summary>

    This section will ignored when generating the vimdoc file.
    This will only show up in the Markdown file.

    </details>

    <!-- panvimdoc-ignore-end -->
<

The following will only be present in the Markdown document.

The convenient advantage of using `<!-- panvimdoc-ignore-{start/end} -->`
blocks in a HTML comment syntax is that the comment will not rendered in HTML
or on GitHub, giving the documentation writers control to present the
information differently on GitHub and in vimdoc. If you want to see examples of
this, see the raw markdown version of this file.

The only thing to keep in mind is that you must leave new line spaces before
and after a comment tag. For example, **do not** do this:

>
    <!-- panvimdoc-ignore-start -->
    ![screenshot](./gif.gif)
    <!-- panvimdoc-ignore-end -->
<

because it may cause the rest of your document to be ignored. Do this instead:

>
    <!-- panvimdoc-ignore-start -->

    ![screenshot](./gif.gif)

    <!-- panvimdoc-ignore-end -->
<


DETAILS AND SUMMARY                    *panvimdoc-heading-details-and-summary*

You can even use `<details>` and `<summary>` tags for your README.md.

Summary ~

This section is the details.

The `html` tags are dropped and the following output is generated in the vimdoc
file.

If you are using html `<b> ... </b>` tags, use them on new lines. Inline bold
tags will have a `~` appended to the text and that may not be what you want.


KEYBOARD HTML TAG                        *panvimdoc-heading-keyboard-html-tag*

Use `<kbd>CMD + o</kbd>` in markdown, for example CMD + o.


EXAMPLES                                          *panvimdoc-heading-examples*

First example


EXAMPLES                                          *panvimdoc-heading-examples*

Second example

Generated by panvimdoc <https://github.com/kdheepak/panvimdoc>

vim:tw=78:ts=8:noet:ft=help:norl:
